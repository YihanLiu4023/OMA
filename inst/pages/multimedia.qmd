---
title: "Multimodal Mediation Analysis"
format: html
editor: visual
author: Yihan Liu, Himel Mallick
---

# **Multimodal Mediation Analysis** {#sec-MSEA}

```{r setup, echo=FALSE, results="asis"}
remove(list = ls())
invisible(gc())
library(rebook)
chapterPreamble()

```

Building upon the concepts and workflows presented in the previous chapter on 
mediation analysis, here we demonstrate how to perform **multimodal mediation** 
**analysis** to identify potential mediators across multiple omics layers. 
**Multimodal mediation analysis** examines whether and how an exposure (e.g., 
treatment, diet) affects an outcome (e.g., disease, phenotype) **through** 
**intermediate variables (mediators) across multiple omics layers** 
**simultaneously** (e.g., microbiome, metabolomics). It identifies which 
features across modalities act as mediators, quantifies indirect (mediated) 
effects while adjusting for covariates, and compares mediation strength across 
layers, providing mechanistic insights into **how exposures impact outcomes** 
**via molecular pathways**.

```{r}
#| label: fig-multimodal-mediation
#| fig-cap: Directed acyclic graph illustrating multimodal mediation where an exposure affects multiple mediators across modalities (microbial species and metabolites), which in turn affect the outcome. A direct path from exposure to outcome is also included (dashed). While gut microbial species biologically influence metabolite levels, for tractability in high-dimensional mediation analysis we assume species and metabolites act as conditionally independent parallel mediators given exposure, acknowledging this as an approximation
#| echo: false

library(DiagrammeR)

grViz("
digraph multimodal_mediation {
  graph [layout = dot, rankdir = LR]
  
  node [fontname = Helvetica, fontsize = 12]
  
  Exposure [shape=box, style=filled, fillcolor=lightblue, color=black]
  Outcome [shape=box, style=filled, fillcolor=palegreen, color=black]
  
  M1 [label='Species 1', shape=ellipse, style=filled, fillcolor=lightyellow, color=black]
  M2 [label='Species 2', shape=ellipse, style=filled, fillcolor=lightyellow, color=black]
  M3 [label='Metabolite 1', shape=ellipse, style=filled, fillcolor=lightpink, color=black]
  M4 [label='Metabolite 2', shape=ellipse, style=filled, fillcolor=lightpink, color=black]
  
  Exposure -> M1
  Exposure -> M2
  Exposure -> M3
  Exposure -> M4
  M1 -> Outcome
  M2 -> Outcome
  M3 -> Outcome
  M4 -> Outcome
  Exposure -> Outcome [style=dashed]
}
")
```

In this chapter, we demonstrate multimodal mediation analysis using microbiome 
data from the iHMP IBDMDB study from the R/Bioconductor package 
curatedMetagenomicData. [@Lloyd-Price2019]. Unlike conventional mediation 
analysis, which typically focuses on a single mediator or a small set of 
mediators, we performed multimodal mediation analysis with R/Bioconductor 
package \[multimedia\] [@Jiang2025] here, which can handle many potential 
mediators across multiple data modalities. For example, species-level taxonomic 
abundances, functional pathways, and metabolomic profiles can all serve as 
potential mediators. This method allows us to estimate and rank each mediator’s 
contribution while accounting for correlations between mediators in a 
high-dimensional setting.

In this example, time point (baseline vs. post-treatment) is used as the 
treatment, and microbiome-based dysbiosis scores are used as the outcome. We 
will first focus on the relative abundances of gut microbial species as 
mediators, followed by functional pathways.

Generally, we will proceed through the following key steps:

1.  Prepare the microbiome taxonomic data from the iHMP IBDMDB project.

2.  Calculate dysbiosis scores as the outcome.

3.  Define the mediation analysis data structure.

4.  Fit the multimodal mediation model using the R package multimedia.

5.  Interpret both the overall indirect effects and the mediator-specific 
indirect effects.

6.  Visualize the results using forest plots, histograms, and rankings to 
prioritize findings.

7.  Repeat the process for the iHMP microbial pathways.

### Performing multimodal mediation analysis for iHMP species relative abundance {#sec-relative-abundance}

We begin by loading the relative abundance data and calculating dysbiosis scores 
for each sample based on Bray–Curtis dissimilarity from a healthy reference set. 
This represents deviation from a healthy microbiome, where higher dysbiosis 
scores indicate greater microbial imbalance. We then subset to IBD subjects with 
samples collected at both baseline (visit 1) and post-treatment (visit 21).

```{r}
##################
# Load libraries #
##################

library(curatedMetagenomicData)
library(SummarizedExperiment)
library(dplyr)
library(vegan)
library(tidyverse)
library(multimedia)
library(stringr)
library(ggplot2)


##################
# Load iHMP data #
##################

# Load data
se_relative <- curatedMetagenomicData(
  "HMP_2019_ibdmdb.relative_abundance", 
  dryrun = FALSE
  )[[1]]

# Normalize to proportions (from %)
assay(se_relative) <- assay(se_relative) / 100

# Change the rownames names for variables of interest
rownames(se_relative) <- sub('.*s__', '', rownames(se_relative))


########################
# Reference nonIBD set #
########################

# Reference set: healthy
ref_set <- colData(se_relative)$disease == "healthy"


########################################
# Calculate Bray-Curtis dissimilarity #
########################################

# Bray-Curtis dissimilarity
dist <- as.matrix(vegdist(t(assay(se_relative)), method = "bray", na.rm = TRUE))

# Assign SampleID for matching
colData(se_relative)$SampleID <- colnames(se_relative)


#################################
# Calculate the dysbiosis score #
#################################

# Calculate dysbiosis score for each sample
colData(se_relative)$dysbiosis <- sapply(seq_along(ref_set), function(i) {
  median(dist[i, ref_set & 
              (colData(se_relative)$SampleID != colData(se_relative)$SampleID[i])], 
         na.rm = TRUE)
})


#############################################################
# Subset to IBD only and only one post-baseline time point #
#############################################################

# Keep IBD only
se_relative <- se_relative[, colData(se_relative)$disease != "healthy"]

# Visit 1 (baseline) or 25 (post)
se_relative <- se_relative[, colData(se_relative)$visit_number %in% c(1, 21)]

# Keep subjects with both visits
keep_subjects <- names(which(table(colData(se_relative)$subject_id) == 2))
se_relative <- se_relative[, colData(se_relative)$subject_id %in% keep_subjects]

# Define time point label
colData(se_relative)$Time_point <- ifelse(
  colData(se_relative)$visit_number == 1, "T0", "T1"
)

```

Next, we will define the mediation anlaysis components. By using the processed 
data, we define:

-   Treatment: time point (baseline vs. post-baseline)
-   Outcome: dysbiosis score
-   Mediators: scaled species abundances

These are bundled into a mediation data object (exper), which is passed into the 
multimedia function to estimate path models for the treatment-to-mediator 
(α path), mediator-to-outcome (β path), and the combined indirect effect (α×β 
path).

```{r define-mediation-data-frame}

#############################
# Define mediation data set #
#############################

# Treatment: Pre and Post (Baseline vs. Post-baseline)
treatment <- factor(colData(se_relative)$Time_point, levels = c("T0", "T1"))

# Outcome: Dysbiosis Score
dysbiosis <- as.numeric(colData(se_relative)$dysbiosis)

# Mediators (scaled, directly from SE): Species
M <- t(assay(se_relative))
M <- scale(M)
M_clean <- M[, colSums(is.na(M)) == 0]

# clean mediator names
raw <- colnames(M_clean)
clean1 <- str_remove_all(raw, "\\[|\\]")
clean2 <- str_replace_all(clean1, "[: \\.,]", "_")

# Save the final safe names
safe_names <- make.names(clean2, unique = TRUE)

# Apply names
colnames(M_clean) <- safe_names

# Convert to tibble
mediators <- as_tibble(M_clean)

# Create the mediation data frame
df <- data.frame(
  treatment = treatment,
  dysbiosis = dysbiosis
) %>%
  bind_cols(mediators)

```

We now fit the multimodal mediation model and inspect the overall indirect and 
direct effects to understand whether microbiome composition mediates the 
treatment's effect on dysbiosis.

```{r overall-mediation-analysis}

#############################
# Run mediation (non-delta) #
#############################

# Create the Mediation Data object
exper <- mediation_data(
  df,
  outcome = "dysbiosis",
  treatment = "treatment",
  mediators = colnames(mediators)
)

# Fit and summarize
mdl <- multimedia(exper)
res <- estimate(mdl, exper)

# Summarize overall indirect/direct
summary(res)
print(indirect_overall(res, exper))
print(direct_effect(res, exper))

```

```{r specific-mediation}

#############################
# Mediator-specific effects
#############################

# Extract the treatment-to-mediator path coefficients
treatment_to_mediator_coef <- sapply(res@mediation@estimates, function(m) coef(m)["treatmentT1"])
names(treatment_to_mediator_coef) <- sub("\\.treatmentT1$", "", names(treatment_to_mediator_coef))

# Extract the mediator-to-outcome path coefficients (adjusted for all mediators)
mediator_to_outcome_coef <- coef(res@outcome@estimates$dysbiosis)[names(treatment_to_mediator_coef)]

# Calculate the indirect effect (product of path coefficients)
indirect_effects <- treatment_to_mediator_coef * mediator_to_outcome_coef

# Summary table
mediator_effects <- data.frame(
  mediator = names(treatment_to_mediator_coef),
  treatment_to_mediator_coef = treatment_to_mediator_coef,
  mediator_to_outcome_coef = mediator_to_outcome_coef,
  indirect_effect = indirect_effects
)

# Rank
top_mediators <- mediator_effects %>%
  arrange(desc(abs(indirect_effect))) %>%
  head(10)

print(top_mediators)

```

To quantify uncertainty around the indirect effects, we use non-parametric 
bootstrap resampling to compute **95% confidence intervals** for both the 
overall and mediator-specific indirect effects.

```{r visualization-for-overall-indirect-effects}

#####################################
# Bootstrap overall indirect effect # 
#####################################

set.seed(12345)
boot_overall <- bootstrap(mdl, exper, c(indirect = indirect_overall), B = 100)
summary(boot_overall$indirect)
quantile(boot_overall$indirect$indirect_effect, probs = c(0.025, 0.975))

# Histogram
ggplot(boot_overall$indirect) +
  geom_histogram(aes(indirect_effect), bins = 20, fill = "#69b3a2", color = "black") +
  theme_classic() +
  labs(
    x = "Overall Indirect Effect",
    y = "Frequency",
    title = "Bootstrap Distribution of Overall Indirect Effect (B = 100)"
  )

```

Finally, we visualize the **mediator-specific indirect effects** using a forest 
plot, displaying point estimates and 95% CIs to highlight the most influential 
mediators.

```{r visualization-for-mediation-specific-indirect-effects}

###############################################
# Bootstrap mediator-specific indirect effect # 
###############################################

# Define an mediation-specific indirect effect function manually
indirect_each <- function(mdl, exper) {
  res <- estimate(mdl, exper)
  alpha <- sapply(res@mediation@estimates, function(m) coef(m)["treatmentT1"])
  names(alpha) <- sub("\\.treatmentT1$", "", names(alpha))
  beta <- coef(res@outcome@estimates$dysbiosis)[names(alpha)]
  indirect <- alpha * beta
  names(indirect) <- names(alpha)
  indirect <- indirect[!is.na(indirect)]
  return(indirect)
}

set.seed(12345)
boot_each <- bootstrap(mdl, exper, c(indirect = indirect_each), B = 100)
summary(boot_each$indirect)

# Summarize the bootstrap results
lower_upper <- apply(boot_each$indirect, 2, function(x) quantile(x, c(0.025, 0.975), na.rm=TRUE))
means <- apply(boot_each$indirect, 2, mean, na.rm=TRUE)

# Convert to data frame
summary_df <- data.frame(
  mediator = colnames(boot_each$indirect),
  estimate = means,
  lower = lower_upper[1,],
  upper = lower_upper[2,]
)
summary_df <- summary_df[-1, ]

# Mark significance if CI does not cross zero
summary_df$significant <- with(summary_df, lower > 0 | upper < 0)

# Remove the species with 0 confidence interval length
summary_df <- summary_df %>% 
  filter((upper - lower) != 0)

# Add rankings
summary_df$rank <- ifelse(summary_df$significant, 1, 2)  # 1 for significant, 2 for not
summary_df <- summary_df[order(summary_df$rank, -abs(summary_df$estimate)), ]

# Forest plot
ggplot(summary_df, aes(x=estimate, y=reorder(mediator, estimate), color=significant)) +
  geom_point() +
  geom_errorbarh(aes(xmin=lower, xmax=upper), height=0.2) +
  geom_vline(xintercept=0, linetype="dashed", color="grey") +
  theme_classic() +
  labs(
    x = "Observed Indirect Effect with Bootstrap CI",
    y = "Mediator",
    title = "Forest Plot of Mediation-specific Indirect Effects for Species"
  ) +
  scale_color_manual(values=c("black","red")) +
  theme(legend.position="bottom")

```

Based on the forest plot results, we can see that the agathobaculum 
butyriciproducens and escherichia coli pathways has significant indirect 
mediation effects.

Next we repeat the mediation analysis with the iHMP pathway abundances using the 
same setup as before, using the time point as the treatment, dysbiosis score as 
the outcome, but functional pathway abundance as the mediation variables instead 
of the relative species abundance.

### Performing multimodal mediation analysis for functional pathway abundance {#sec-pathway-abundance}

Let's extract the pathway abundance data from the iHMP data first, as well as 
other data pre-processing.

```{r load-pkg-data}

se_pathway <- curatedMetagenomicData(
  "HMP_2019_ibdmdb.pathway_abundance", 
  dryrun = FALSE
  )[[1]]

rows_to_keep <- !grepl("\\|", rownames(se_pathway))
rows_to_keep[which(rows_to_keep)[1:2]] <- FALSE
se_pathway <- se_pathway[rows_to_keep, ]
assay(se_pathway) <- assay(se_pathway) / 100
ref_set <- colData(se_pathway)$disease == "healthy"

dist <- as.matrix(vegdist(t(assay(se_pathway)), method = "bray", na.rm = TRUE))
colData(se_pathway)$SampleID <- colnames(se_pathway)
colData(se_pathway)$dysbiosis <- sapply(seq_along(ref_set), function(i) {
  median(dist[i, ref_set & 
              (colData(se_pathway)$SampleID != colData(se_pathway)$SampleID[i])], 
         na.rm = TRUE)
})

se_pathway <- se_pathway[, colData(se_pathway)$disease != "healthy"]
se_pathway <- se_pathway[, colData(se_pathway)$visit_number %in% c(1, 27)]
keep_subjects <- names(which(table(colData(se_pathway)$subject_id) == 2))
se_pathway <- se_pathway[, colData(se_pathway)$subject_id %in% keep_subjects]

colData(se_pathway)$Time_point <- ifelse(
  colData(se_pathway)$visit_number == 1, "T0", "T1"
)

```

We will define the mediation analysis data set then.

```{r define-mediation-data-frame}

treatment <- factor(colData(se_pathway)$Time_point, levels = c("T0", "T1"))
dysbiosis <- as.numeric(colData(se_pathway)$dysbiosis)

M <- t(assay(se_pathway))
M <- scale(M)
M_clean <- M[, colSums(is.na(M)) == 0]

raw <- colnames(M_clean)
clean1 <- str_remove_all(raw, "\\[|\\]")
clean2 <- str_replace_all(clean1, "[: \\.,]", "_")
safe_names <- make.names(clean2, unique = TRUE)
colnames(M_clean) <- safe_names

mediators <- as_tibble(M_clean)

df <- data.frame(
  treatment = treatment,
  dysbiosis = dysbiosis
) %>%
  bind_cols(mediators)

```

Next, we continue to fit the multimodal mediation model, and extract the overall 
and mediation-specific indirect effects.

```{r mediation-analysis}

exper <- mediation_data(
  df,
  outcome = "dysbiosis",
  treatment = "treatment",
  mediators = colnames(mediators)
)
mdl <- multimedia(exper)
res <- estimate(mdl, exper)
summary(res)
print(indirect_overall(res, exper))
print(direct_effect(res, exper))


treatment_to_mediator_coef <- sapply(res@mediation@estimates, function(m) coef(m)["treatmentT1"])
names(treatment_to_mediator_coef) <- sub("\\.treatmentT1$", "", names(treatment_to_mediator_coef))
mediator_to_outcome_coef <- coef(res@outcome@estimates$dysbiosis)[names(treatment_to_mediator_coef)]
indirect_effects <- treatment_to_mediator_coef * mediator_to_outcome_coef

mediator_effects <- data.frame(
  mediator = names(treatment_to_mediator_coef),
  treatment_to_mediator_coef = treatment_to_mediator_coef,
  mediator_to_outcome_coef = mediator_to_outcome_coef,
  indirect_effect = indirect_effects
)

top_mediators <- mediator_effects %>%
  arrange(desc(abs(indirect_effect))) %>%
  head(10)
print(top_mediators)

```

The non-parametric bootstrap resampling is also used to compute **95% CIs** for 
both the overall and mediator-specific pathway indirect effects.

```{r visualization-for-overall-indirect-effects}

set.seed(1234)
boot_overall <- bootstrap(mdl, exper, c(indirect = indirect_overall), B = 100)
summary(boot_overall$indirect)
quantile(boot_overall$indirect$indirect_effect, probs = c(0.025, 0.975))

ggplot(boot_overall$indirect) +
  geom_histogram(aes(indirect_effect), bins = 20, fill = "#69b3a2", color = "black") +
  theme_classic() +
  labs(
    x = "Overall Indirect Effect",
    y = "Frequency",
    title = "Bootstrap Distribution of Overall Indirect Effect (B = 100)"
  )

```

We visualize the **mediator-specific indirect effects** using a forest plot for 
pathway aubundance as well. with the point estimates and 95% CIs.

```{r visualization-for-mediation-specific-indirect-effects}

indirect_each <- function(mdl, exper) {
  res <- estimate(mdl, exper)
  alpha <- sapply(res@mediation@estimates, function(m) coef(m)["treatmentT1"])
  names(alpha) <- sub("\\.treatmentT1$", "", names(alpha))
  beta <- coef(res@outcome@estimates$dysbiosis)[names(alpha)]
  indirect <- alpha * beta
  names(indirect) <- names(alpha)
  indirect <- indirect[!is.na(indirect)]
  return(indirect)
}

set.seed(1234)
boot_each <- bootstrap(mdl, exper, c(indirect = indirect_each), B = 100)

lower_upper <- apply(boot_each$indirect, 2, function(x) quantile(x, c(0.025, 0.975), na.rm=TRUE))
means <- apply(boot_each$indirect, 2, mean, na.rm=TRUE)
summary_df <- data.frame(
  mediator = colnames(boot_each$indirect),
  estimate = means,
  lower = lower_upper[1,],
  upper = lower_upper[2,]
)

summary_df <- summary_df[-1, ]
summary_df$significant <- with(summary_df, lower > 0 | upper < 0)
summary_df <- summary_df[summary_df$upper != summary_df$lower, ]

# Clean the pathway names
pwy <- rownames(summary_df)
pwy <- gsub("PWY0\\.", "PWY0-", pwy) # PWY0.xxx → PWY0-xxx
pwy <- gsub("PWY\\.", "PWY-", pwy) # PWY.xxx → PWY-xxx
pwy <- gsub("\\.", " ", pwy) # leftover dots → spaces
pwy <- gsub("__", ": ", pwy) # double underscores → colon
pwy <- gsub("_\\.", " ", pwy) # underscore then dot → space
pwy <- gsub("_", " ", pwy) # remaining underscores → space
pwy <- gsub("\\.\\.", " ", pwy) # double dots → space
pwy <- gsub("\\.$", "", pwy) # remove ending period
# pwy <- trimws(pwy) # final cleanup
rownames(summary_df) <- pwy

ggplot(summary_df, aes(x=estimate, y=reorder(mediator, estimate), color=significant)) +
  geom_point() +
  geom_errorbarh(aes(xmin=lower, xmax=upper), height=0.2) +
  geom_vline(xintercept=0, linetype="dashed", color="grey") +
  theme_classic() +
  labs(
    x = "Observed Indirect Effect with Bootstrap CI",
    y = "Mediator",
    title = "Forest Plot of Mediation-specific Indirect Effects for Pathway"
  ) +
  scale_color_manual(values=c("black","red")) +
  theme(legend.position="bottom")

```

Based on the forest plot results, we can see that the tRNA charging pathway has 
significant indirect mediation effects on the dysbiosis scores.
